>>> from relations.models import Framework, Language
>>>
>>> python = Language.object.create(name="python")
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: type object 'Language' has no attribute 'object'
>>> python = Language.objects.create(name="python")
>>> django = Framework.objects.create(name="django", language=python)
>>> flask = Framework.objects.create(name="flask", language=python)
>>> bottle = Framework.objects.create(name="bottle", language=python)
>>> java = Language()
>>> java.name = "java"
>>> java.save()
>>> java
<Language: java>
>>> spring = Framework(name="spring", language=java)
>>>
>>> Framework.objects.all()
<QuerySet [<Framework: django>, <Framework: flask>, <Framework: bottle>]>
>>> spring.save()
>>> Framework.objects.all()
<QuerySet [<Framework: django>, <Framework: flask>, <Framework: bottle>, <Framework: spring>]>
>>> Language.objects.all()
<QuerySet [<Language: python>, <Language: java>]>
>>> python = Language.objects.get(name="python")
>>> python
<Language: python>
>>> dir(python)
['DoesNotExist', 'MultipleObjectsReturned', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '_
_ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__',
 '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setstate__', '__sizeof__', '__str__', '__subclass
hook__', '__weakref__', '_check_column_name_clashes', '_check_constraints', '_check_default_pk', '_check_field_name_clashes', '_chec
k_fields', '_check_id_field', '_check_index_together', '_check_indexes', '_check_local_fields', '_check_long_column_names', '_check_
m2m_through_same_relationship', '_check_managers', '_check_model', '_check_model_name_db_lookup_clashes', '_check_ordering', '_check
_property_name_related_field_accessor_clashes', '_check_single_primary_key', '_check_swappable', '_check_unique_together', '_do_inse
rt', '_do_update', '_get_FIELD_display', '_get_expr_references', '_get_next_or_previous_by_FIELD', '_get_next_or_previous_in_order',
 '_get_pk_val', '_get_unique_checks', '_meta', '_perform_date_checks', '_perform_unique_checks', '_prepare_related_fields_for_save',
 '_save_parents', '_save_table', '_set_pk_val', '_state', 'check', 'clean', 'clean_fields', 'date_error_message', 'delete', 'framewo
rk_set', 'from_db', 'full_clean', 'get_deferred_fields', 'id', 'name', 'objects', 'pk', 'prepare_database_save', 'refresh_from_db',
'save', 'save_base', 'serializable_value', 'unique_error_message', 'validate_unique']
>>> django
<Framework: django>
>>> dir(django)
['DoesNotExist', 'MultipleObjectsReturned', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '_
_ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__',
 '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setstate__', '__sizeof__', '__str__', '__subclass
hook__', '__weakref__', '_check_column_name_clashes', '_check_constraints', '_check_default_pk', '_check_field_name_clashes', '_chec
k_fields', '_check_id_field', '_check_index_together', '_check_indexes', '_check_local_fields', '_check_long_column_names', '_check_
m2m_through_same_relationship', '_check_managers', '_check_model', '_check_model_name_db_lookup_clashes', '_check_ordering', '_check
_property_name_related_field_accessor_clashes', '_check_single_primary_key', '_check_swappable', '_check_unique_together', '_do_inse
rt', '_do_update', '_get_FIELD_display', '_get_expr_references', '_get_next_or_previous_by_FIELD', '_get_next_or_previous_in_order',
 '_get_pk_val', '_get_unique_checks', '_meta', '_perform_date_checks', '_perform_unique_checks', '_prepare_related_fields_for_save',
 '_save_parents', '_save_table', '_set_pk_val', '_state', 'check', 'clean', 'clean_fields', 'date_error_message', 'delete', 'from_db
', 'full_clean', 'get_deferred_fields', 'id', 'language', 'language_id', 'name', 'objects', 'pk', 'prepare_database_save', 'refresh_
from_db', 'save', 'save_base', 'serializable_value', 'unique_error_message', 'validate_unique']
>>>
>>> django.framework_set
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Framework' object has no attribute 'framework_set'
>>>
>>>
>>> python.framework_set
<django.db.models.fields.related_descriptors.create_reverse_many_to_one_manager.<locals>.RelatedManager object at 0x000001EDCB4FA700
>
>>> python.framework_set.all()
<QuerySet [<Framework: django>, <Framework: flask>, <Framework: bottle>]>
>>> python.framework_set.first()
<Framework: django>
>>> dir(python.framework_set)
['__call__', '__class__', '__class_getitem__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '_
_getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__r
educe__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slotnames__', '__str__', '__subclasshook__', '__weakref__', '
_apply_rel_filters', '_constructor_args', '_db', '_get_queryset_methods', '_hints', '_insert', '_queryset_class', '_remove_prefetche
d_objects', '_set_creation_counter', '_update', 'add', 'aggregate', 'alias', 'all', 'annotate', 'auto_created', 'bulk_create', 'bulk
_update', 'check', 'complex_filter', 'contribute_to_class', 'core_filters', 'count', 'create', 'creation_counter', 'dates', 'datetim
es', 'db', 'db_manager', 'deconstruct', 'defer', 'difference', 'distinct', 'do_not_call_in_templates', 'earliest', 'exclude', 'exist
s', 'explain', 'extra', 'field', 'filter', 'first', 'from_queryset', 'get', 'get_or_create', 'get_prefetch_queryset', 'get_queryset'
, 'in_bulk', 'instance', 'intersection', 'iterator', 'last', 'latest', 'model', 'name', 'none', 'only', 'order_by', 'prefetch_relate
d', 'raw', 'reverse', 'select_for_update', 'select_related', 'set', 'union', 'update', 'update_or_create', 'use_in_migrations', 'usi
ng', 'values', 'values_list']
>>> Framework(language__name="python")
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\Users\jerem\PycharmProjects\backend_zdpytpol44\venv\lib\site-packages\django\db\models\base.py", line 503, in __init__
    raise TypeError("%s() got an unexpected keyword argument '%s'" % (cls.__name__, kwarg))
TypeError: Framework() got an unexpected keyword argument 'language__name'
>>> Framework.objects.filter(language__name="python")
<QuerySet [<Framework: django>, <Framework: flask>, <Framework: bottle>]>
>>> Language.framework_set.all()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'ReverseManyToOneDescriptor' object has no attribute 'all'
>>> java.framework_set.all()
<QuerySet [<Framework: spring>]>
>>> java.objects
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\Users\jerem\PycharmProjects\backend_zdpytpol44\venv\lib\site-packages\django\db\models\manager.py", line 179, in __get__
    raise AttributeError("Manager isn't accessible via %s instances" % cls.__name__)
AttributeError: Manager isn't accessible via Language instances
>>> Language.objects.all()
<QuerySet [<Language: python>, <Language: java>]>
>>> python.framework_set.all()
<QuerySet [<Framework: django>, <Framework: flask>, <Framework: bottle>]>
