>>> from relations.models import Character, Movie
>>>
>>> avengers = Movie.objects.create(name="Avengers")
>>> capitan_america = Character.objects.create(name="Capitan America")
>>> capitan_america.movies
<django.db.models.fields.related_descriptors.create_forward_many_to_many_manager.<locals>.ManyRelatedManager object at 0x000002A2016
B03A0>
>>> dir(capitan_america.movies)
['__call__', '__class__', '__class_getitem__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '_
_getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__r
educe__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slotnames__', '__str__', '__subclasshook__', '__weakref__', '
_add_items', '_apply_rel_filters', '_build_remove_filters', '_constructor_args', '_db', '_get_add_plan', '_get_missing_target_ids',
'_get_queryset_methods', '_get_target_ids', '_hints', '_insert', '_queryset_class', '_remove_items', '_remove_prefetched_objects', '
_set_creation_counter', '_update', 'add', 'aggregate', 'alias', 'all', 'annotate', 'auto_created', 'bulk_create', 'bulk_update', 'ch
eck', 'clear', 'complex_filter', 'contribute_to_class', 'core_filters', 'count', 'create', 'creation_counter', 'dates', 'datetimes',
 'db', 'db_manager', 'deconstruct', 'defer', 'difference', 'distinct', 'do_not_call_in_templates', 'earliest', 'exclude', 'exists',
'explain', 'extra', 'filter', 'first', 'from_queryset', 'get', 'get_or_create', 'get_prefetch_queryset', 'get_queryset', 'in_bulk',
'instance', 'intersection', 'iterator', 'last', 'latest', 'model', 'name', 'none', 'only', 'order_by', 'pk_field_names', 'prefetch_c
ache_name', 'prefetch_related', 'query_field_name', 'raw', 'related_val', 'remove', 'reverse', 'select_for_update', 'select_related'
, 'set', 'source_field', 'source_field_name', 'symmetrical', 'target_field', 'target_field_name', 'through', 'union', 'update', 'upd
ate_or_create', 'use_in_migrations', 'using', 'values', 'values_list']
>>> capitan_america.movies.add(avengers)
>>> dir(capitan_america)
['DoesNotExist', 'MultipleObjectsReturned', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '_
_ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__',
 '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setstate__', '__sizeof__', '__str__', '__subclass
hook__', '__weakref__', '_check_column_name_clashes', '_check_constraints', '_check_default_pk', '_check_field_name_clashes', '_chec
k_fields', '_check_id_field', '_check_index_together', '_check_indexes', '_check_local_fields', '_check_long_column_names', '_check_
m2m_through_same_relationship', '_check_managers', '_check_model', '_check_model_name_db_lookup_clashes', '_check_ordering', '_check
_property_name_related_field_accessor_clashes', '_check_single_primary_key', '_check_swappable', '_check_unique_together', '_do_inse
rt', '_do_update', '_get_FIELD_display', '_get_expr_references', '_get_next_or_previous_by_FIELD', '_get_next_or_previous_in_order',
 '_get_pk_val', '_get_unique_checks', '_meta', '_perform_date_checks', '_perform_unique_checks', '_prepare_related_fields_for_save',
 '_save_parents', '_save_table', '_set_pk_val', '_state', 'check', 'clean', 'clean_fields', 'date_error_message', 'delete', 'from_db
', 'full_clean', 'get_deferred_fields', 'id', 'movies', 'name', 'objects', 'pk', 'prepare_database_save', 'refresh_from_db', 'save',
 'save_base', 'serializable_value', 'unique_error_message', 'validate_unique']
>>> dir(avengers)
['DoesNotExist', 'MultipleObjectsReturned', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '_
_ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__',
 '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setstate__', '__sizeof__', '__str__', '__subclass
hook__', '__weakref__', '_check_column_name_clashes', '_check_constraints', '_check_default_pk', '_check_field_name_clashes', '_chec
k_fields', '_check_id_field', '_check_index_together', '_check_indexes', '_check_local_fields', '_check_long_column_names', '_check_
m2m_through_same_relationship', '_check_managers', '_check_model', '_check_model_name_db_lookup_clashes', '_check_ordering', '_check
_property_name_related_field_accessor_clashes', '_check_single_primary_key', '_check_swappable', '_check_unique_together', '_do_inse
rt', '_do_update', '_get_FIELD_display', '_get_expr_references', '_get_next_or_previous_by_FIELD', '_get_next_or_previous_in_order',
 '_get_pk_val', '_get_unique_checks', '_meta', '_perform_date_checks', '_perform_unique_checks', '_prepare_related_fields_for_save',
 '_save_parents', '_save_table', '_set_pk_val', '_state', 'character_set', 'check', 'clean', 'clean_fields', 'date_error_message', '
delete', 'from_db', 'full_clean', 'get_deferred_fields', 'id', 'name', 'objects', 'pk', 'prepare_database_save', 'refresh_from_db',
'save', 'save_base', 'serializable_value', 'unique_error_message', 'validate_unique']
>>> capitan_america.movies.create(name="Civil War")
<Movie: Civil War>
>>> avengers.character_set.create(name="Hulk")
<Character: Hulk>
>>> superman = Character.objects.create(name="Superman")
>>> batman = Character.objects.create(name="Batman")
>>>
>>> avengers.character_set.set([superman, batman])
>>> avengers.character_set.all()
<QuerySet [<Character: Superman>, <Character: Batman>]>
>>> dir(avengers)
['DoesNotExist', 'MultipleObjectsReturned', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '_
_ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__',
 '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setstate__', '__sizeof__', '__str__', '__subclass
hook__', '__weakref__', '_check_column_name_clashes', '_check_constraints', '_check_default_pk', '_check_field_name_clashes', '_chec
k_fields', '_check_id_field', '_check_index_together', '_check_indexes', '_check_local_fields', '_check_long_column_names', '_check_
m2m_through_same_relationship', '_check_managers', '_check_model', '_check_model_name_db_lookup_clashes', '_check_ordering', '_check
_property_name_related_field_accessor_clashes', '_check_single_primary_key', '_check_swappable', '_check_unique_together', '_do_inse
rt', '_do_update', '_get_FIELD_display', '_get_expr_references', '_get_next_or_previous_by_FIELD', '_get_next_or_previous_in_order',
 '_get_pk_val', '_get_unique_checks', '_meta', '_perform_date_checks', '_perform_unique_checks', '_prepare_related_fields_for_save',
 '_save_parents', '_save_table', '_set_pk_val', '_state', 'character_set', 'check', 'clean', 'clean_fields', 'date_error_message', '
delete', 'from_db', 'full_clean', 'get_deferred_fields', 'id', 'name', 'objects', 'pk', 'prepare_database_save', 'refresh_from_db',
'save', 'save_base', 'serializable_value', 'unique_error_message', 'validate_unique']
>>> capitan_america.movies.all()
<QuerySet [<Movie: Civil War>]>
>>> avengers.character_set.create(name="Hulk")
<Character: Hulk>
>>> avengers.character_set.all()
<QuerySet [<Character: Superman>, <Character: Batman>, <Character: Hulk>]>
>>> superman.movies.all()
<QuerySet [<Movie: Avengers>]>
>>> Character.objects.filter(movies__name="Avengers")
<QuerySet [<Character: Superman>, <Character: Batman>, <Character: Hulk>]>
